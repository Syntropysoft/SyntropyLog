
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper-kafka-example
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka1-example
    depends_on:
      - zookeeper
    ports:
      - "9092:9092" # Port for connection from the host
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2 # Suitable for 2 brokers
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  kafka2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka2-example
    depends_on:
      - zookeeper
    ports:
      - "9093:9093" # Port for connection from the host
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop-example
    restart: always
    ports:
      - "9000:9000" # Kafdrop UI
    environment:
      KAFKA_BROKERCONNECT: "kafka1:29092,kafka2:29093" # Connection to brokers within the Docker network
    depends_on:
      - kafka1
      - kafka2

  kafka-producer-test:
    image: confluentinc/cp-kafkacat:latest
    container_name: kafka-producer-test
    depends_on:
      - kafka1
      - kafka2
    command: > # This service is for a quick manual test to see if a message can be produced.
      /bin/sh -c "
        echo 'Waiting for Kafka to be ready...' &&
        sleep 15 &&
        echo 'Sending test message...' &&
        echo 'Hello Kafka from docker-compose!' | kafkacat -P -b kafka1:29092,kafka2:29093 -t test-topic-dockercompose &&
        echo 'Message sent.'
      "
    # profile: test # You can use profiles to run it only when you want

  kafka-consumer-test:
    image: confluentinc/cp-kafkacat:latest
    container_name: kafka-consumer-test
    depends_on:
      - kafka1
      - kafka2
      - kafka-producer-test # Ensures the producer tries to send first
    command: > # This service is for a quick manual test to see if a message can be consumed.
      /bin/sh -c "
        echo 'Waiting for Kafka to be ready and for the producer to have attempted to send...' &&
        sleep 20 &&
        echo 'Attempting to consume test message...' &&
        kafkacat -C -b kafka1:29092,kafka2:29093 -t test-topic-dockercompose -e -o beginning -c 1
      "
    # profile: test

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-example
    restart: always
    ports:
      - "5672:5672"    # Puerto para conexiones de aplicaciones
      - "15672:15672"  # Puerto para la consola de administraci√≥n web
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
