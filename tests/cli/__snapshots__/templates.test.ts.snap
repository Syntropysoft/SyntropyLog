// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`CLI Templates > getAuditPlanTemplate > should generate a JavaScript (CJS) audit plan correctly 1`] = `
"/**
* SYNTROPYLOG AUDIT PLAN
* --------------------
* This file defines the audit plan for your project's configurations.
* The \`syntropylog audit\` command will execute each job defined in this array.
*/

const { coreRules } = require('syntropylog/doctor');
// const { productionRules } = require('./my-checks/production.js');

module.exports = [
{
  name: 'Production Config Audit',
  configFile: './config/production.yaml',
  // For production, we want all core rules plus our custom hardening rules.
  rules: [
      ...coreRules,
      // ...productionRules 
  ],
},
{
  name: 'Staging Config Audit',
  configFile: './config/staging.yaml',
  // For staging, we might want to be less strict.
  rules: coreRules.filter(rule => rule.id !== 'prod-log-level'),
},
];"
`;

exports[`CLI Templates > getAuditPlanTemplate > should generate a JavaScript (ESM) audit plan correctly 1`] = `
"/**
* SYNTROPYLOG AUDIT PLAN
* --------------------
* This file defines the audit plan for your project's configurations.
* The \`syntropylog audit\` command will execute each job defined in this array.
*/

import { coreRules } from 'syntropylog/doctor';
// import { productionRules } from './my-checks/production.js';

export default [
{
  name: 'Production Config Audit',
  configFile: './config/production.yaml',
  // For production, we want all core rules plus our custom hardening rules.
  rules: [
      ...coreRules,
      // ...productionRules 
  ],
},
{
  name: 'Staging Config Audit',
  configFile: './config/staging.yaml',
  // For staging, we might want to be less strict.
  rules: coreRules.filter(rule => rule.id !== 'prod-log-level'),
},
];"
`;

exports[`CLI Templates > getAuditPlanTemplate > should generate a TypeScript audit plan correctly 1`] = `
"/**
* SYNTROPYLOG AUDIT PLAN
* --------------------
* This file defines the audit plan for your project's configurations.
* The \`syntropylog audit\` command will execute each job defined in this array.
*/

import type { DiagnosticRule } from 'syntropylog/doctor';

import { coreRules } from 'syntropylog/doctor';
// import { productionRules } from './my-checks/production.js';

export default [
{
  name: 'Production Config Audit',
  configFile: './config/production.yaml',
  // For production, we want all core rules plus our custom hardening rules.
  rules: [
      ...coreRules,
      // ...productionRules 
  ],
},
{
  name: 'Staging Config Audit',
  configFile: './config/staging.yaml',
  // For staging, we might want to be less strict.
  rules: coreRules.filter(rule => rule.id !== 'prod-log-level'),
},
];"
`;

exports[`CLI Templates > getDoctorManifestTemplate > should generate a JavaScript (CJS) manifest correctly 1`] = `
"/**
* SYNTROPYLOG DOCTOR RULE MANIFEST
* This file configures the diagnostic rules for the \`syntropylog doctor\` command.
* You can import the built-in rules, add your own, or even filter out core rules.
*/

const { coreRules } = require('syntropylog/doctor');

module.exports = [
// Spread in all core rules provided by the library.
...coreRules,

// Example: Filtering out a core rule you don't need.
// ...coreRules.filter(rule => rule.id !== 'suspicious-timeouts'),

// Example: Adding your own custom rules.
// {
//   id: 'my-corp-rule-001',
//   description: 'Ensures all Redis instances have a timeout.',
//   check: (config) => { /* ... your logic ... */ return []; }
// },
];"
`;

exports[`CLI Templates > getDoctorManifestTemplate > should generate a JavaScript (ESM) manifest correctly 1`] = `
"/**
* SYNTROPYLOG DOCTOR RULE MANIFEST
* This file configures the diagnostic rules for the \`syntropylog doctor\` command.
* You can import the built-in rules, add your own, or even filter out core rules.
*/

import { coreRules } from 'syntropylog/doctor';

export default [
// Spread in all core rules provided by the library.
...coreRules,

// Example: Filtering out a core rule you don't need.
// ...coreRules.filter(rule => rule.id !== 'suspicious-timeouts'),

// Example: Adding your own custom rules.
// {
//   id: 'my-corp-rule-001',
//   description: 'Ensures all Redis instances have a timeout.',
//   check: (config) => { /* ... your logic ... */ return []; }
// },
];"
`;

exports[`CLI Templates > getDoctorManifestTemplate > should generate a TypeScript manifest correctly 1`] = `
"/**
* SYNTROPYLOG DOCTOR RULE MANIFEST
* This file configures the diagnostic rules for the \`syntropylog doctor\` command.
* You can import the built-in rules, add your own, or even filter out core rules.
*/

import type { DiagnosticRule } from 'syntropylog/doctor';

import { coreRules } from 'syntropylog/doctor';

export default [
// Spread in all core rules provided by the library.
...coreRules,

// Example: Filtering out a core rule you don't need.
// ...coreRules.filter(rule => rule.id !== 'suspicious-timeouts'),

// Example: Adding your own custom rules.
// {
//   id: 'my-corp-rule-001',
//   description: 'Ensures all Redis instances have a timeout.',
//   check: (config) => { /* ... your logic ... */ return []; }
// },
];"
`;
